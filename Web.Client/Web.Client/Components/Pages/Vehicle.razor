@inject IVehicleService VehicleService;
@inject NavigationManager NavigationManager;
@page "/vehicle/{_number?}"
@using Services
@using System.Linq.Expressions
@rendermode InteractiveServer
<div class="wrap">

	<EditForm FormName="vehicleForm" Model="_vehicle" Enhance="true" OnValidSubmit="OnValidSubmit">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<ValidationSummary></ValidationSummary>
		<div class="form-header">
			<h2>Vehicle Registration</h2>
		</div>
		<div class="form-body">
			<fieldset>
				<label for="brand">Brand</label>
				<InputText @bind-Value="_vehicle.Brand" DisplayName="brand"></InputText>
				<label for="model">Model</label>
				<InputText @bind-Value="_vehicle.Model" DisplayName="model"></InputText>
			</fieldset>
		</div>
		<div class="form-footer">
			<div class="row">
				<div class="col">
					<input type="submit" value="Create" />
				</div>
				<div class="col">
					<input type="button" @onclick="@(()=>OnCancel())" value="Cancel" />
				</div>
			</div>
		</div>

	</EditForm>
</div>
@code {
	[Parameter]
	public string? _number { get; set; }

	private EditContext _editContext;
	private ValidationMessageStore? _messageStore;
	private Domain.Vehicle _vehicle { get; set; } = new();
	private string _email { get; set; }
	private IList<Domain.Vehicle> _vehicles { get; set; } = new List<Domain.Vehicle>();
	protected override async Task OnParametersSetAsync()
	{
		if (_number != null)
		{
			_vehicle = await VehicleService.GetVehicleByNumber(new Guid(_number!));
		}
	}

	protected override async Task OnInitializedAsync()
	{
		_editContext = new EditContext(_vehicle);
		_messageStore = new ValidationMessageStore(_editContext);

	}


	private async Task OnValidSubmit(EditContext editContext)
	{
		try
		{

			Console.WriteLine("OnValidSubmit");
			await VehicleService.RegisterNewVehicle(_vehicle);

			Console.WriteLine("RegisterNewvehicle");
			NavigationManager.NavigateTo("/lisvehicle");

			Console.WriteLine("NavigateTo");
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}

	}
	private void OnCancel()
	{
		NavigationManager.NavigateTo("/lisvehicle");
	}

}
