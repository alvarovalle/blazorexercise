@inject IClientService ClientService;
@inject NavigationManager NavigationManager;
@page "/client/{_number?}"
@using Services
@using System.Linq.Expressions
@using Web.Client.Components.Pages.Controls
@rendermode InteractiveServer

<!-- partial:index.partial.html -->
<div class="wrap">
	<EditForm FormName="ClientForm" Model="_client" Enhance="true" OnValidSubmit="OnValidSubmit">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<ValidationSummary></ValidationSummary>
		<InputGuid @bind-Value="_client.Number" hidden></InputGuid>
		<div class="form-header">
			<h2>Client Registration</h2>
		</div>
		<div class="form-body">
			<fieldset>
				<label for="name">Name</label>
				<InputText @bind-Value="_client.Name" DisplayName="name"></InputText>
				<label for="email">Email</label>
				<InputText @bind-Value="_client.Email" DisplayName="email" @ValueChanged="@(()=>EmailValueChanged())"></InputText>
			</fieldset>
		</div>
		<div class="form-footer">
			<div class="row">
				<div class="col">
					<input type="submit" value="Save" />
				</div>
				<div class="col">
					<input type="button" @onclick="@(()=>OnCancel())" value="Cancel" />
				</div>
			</div>
		</div>
	</EditForm>
</div>

@code {
	[Parameter]
	public string? _number { get; set; }
	[SupplyParameterFromForm]
	private Domain.Client _client { get; set; } = new();

	private EditContext _editContext;
	private ValidationMessageStore? _messageStore;
	private string _email { get; set; }
	private IList<Domain.Client> _clients { get; set; } = new List<Domain.Client>();
	protected override async Task OnParametersSetAsync()
	{
		if (_number != null)
		{
			_client = await ClientService.GetClientByNumber(new Guid(_number!));
		}
	}
	private void EmailValueChanged()
	{
		var message = ClientService.CheckIfEmailExists(_client.Email).Result;

		if (!string.IsNullOrWhiteSpace(message))
		{
			_messageStore?.Clear();
			_messageStore?.Add(() => _client.Email, "Email already in use");
			_editContext.Validate();
		}

	}
	protected override async Task OnInitializedAsync()
	{
		_editContext = new EditContext(_client);
		_messageStore = new ValidationMessageStore(_editContext);

	}


	private async Task OnValidSubmit(EditContext editContext)
	{
		Console.WriteLine("OnValidSubmit");
		try
		{
			await ClientService.RegisterClient(_client);
			Console.WriteLine("RegisterClient");
			
			NavigationManager.NavigateTo("/lisclient");
			Console.WriteLine("NavigateTo /lisclient");
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}

	}
	private void OnCancel()
	{
		NavigationManager.NavigateTo("/lisclient");
	}

}
